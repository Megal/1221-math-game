local speed = 196
local max_speed = 19600 * 3.14
local acceleration_constant = 196 * 128
local half_tile = 32
local tile_size = half_tile * 2
local time_min = 0.05
local time_max = 0.2
local lateral_speed_compensation_time = 0.2
local color_green = vmath.vector4(0, 1, 0, 1)
local win_delay = 1.5
go.property("win_score", 4)

debugger = require('libs.debugger')
debugger.start()

function init(self)
    print("INIT MAIN PLAYER")
    msg.post(".", "acquire_input_focus")
    msg.post("loader:/controller#virtual_gamepad", "register")
    self.dir = vmath.vector3()
    self.current_anim = nil
    self.move_remains = 0
    self.time_remains = 0
    self.win_timer = 1000000
    self.score = 0
end

function final(self)
    msg.post("loader:/controller#virtual_gamepad", "unregister")
end

function update(self, dt)
    self.dir = normExceed(self.dir)
    local p = go.get_position()
    local step = math.min(speed * dt, self.move_remains)
    self.move_remains = self.move_remains - step
    self.time_remains = self.time_remains - dt
    self.win_timer = self.win_timer - dt
        
    -- go.set_position(p + self.dir * step)
    
    local current_speed_vec3 = go.get("astronaut#collisionobject", "linear_velocity")
    local current_speed = vmath.length_sqr(current_speed_vec3)
    -- msg.post("@render:", "draw_debug_text", { text = "speed: " .. current_speed, position = vmath.vector3(64, 64, 0), color = color_green })
    local frictionK =  (1.0 - current_speed / max_speed)
    local impulseK = math.max(0.0, (1.1 - self.time_remains / time_max))
    local accel = self.dir * acceleration_constant * frictionK * impulseK * impulseK

    -- apply friction to lateral to dir
    if vmath.length_sqr(current_speed_vec3) > 1e-9 and vmath.length_sqr(self.dir) > 1e-9 then
        local proj = vmath.project(current_speed_vec3, self.dir) * self.dir
        local lateral = current_speed_vec3 - proj

        if vmath.length_sqr(lateral) > 0.1 then
            -- msg.post("@render:", "draw_debug_text", { text = "lateral: " .. vmath.length_sqr(lateral), position = vmath.vector3(64, 164, 0), color = color_green }) 
            local compensation = math.min(1.0, dt / lateral_speed_compensation_time)
            go.set("astronaut#collisionobject", "linear_velocity", current_speed_vec3 - lateral * compensation)            
        end
    end
    
        
    if self.time_remains > 1e-9 then
        -- msg.post("astronaut#collisionobject", "applied_impulse", { })
        go.set("astronaut#collisionobject", "linear_damping", 0.95)
        -- go.set("astronaut#collisionobject", "linear_velocity", self.dir * step * speed)

        if current_speed < max_speed then
            msg.post("astronaut#collisionobject", "apply_force", { force = accel, position = p })
        end
    else
        go.set("astronaut#collisionobject", "linear_damping", 1)
        local changeVector = nearest_tile_center(p) - p
        local changeVectorNormilizedAndScaled = normExceed( changeVector ) * speed * dt
        if vmath.length_sqr(changeVectorNormilizedAndScaled) <  vmath.length_sqr(changeVector) then
            -- animate snap
            go.set_position(p + changeVectorNormilizedAndScaled)
        else
            -- set to snapXY if close enough
            go.set_position(nearest_tile_center(p))
        end

    end
    
    -- animate the astronaut

    local anim = hash("idle")

    if self.dir.x > 0 then
        anim = hash("right")
    elseif self.dir.x < 0 then
        anim = hash("left")
    elseif self.dir.y > 0 then
        anim = hash("back")
    elseif self.dir.y < 0 then
        anim = hash("front")
    end

    if anim ~= self.current_anim then
        msg.post("#sprite", "play_animation", { id = anim })
        self.current_anim = anim
    end

    -- done animating
    -- if self.move_remains < 1e-9 then
    --     self.dir = vmath.vector3()
    -- end
    if self.time_remains < 1e-9 then
        self.dir = vmath.vector3()
    end

    -- update score
    draw_score(self)
    check_win_condition(self)
end

function on_input(self, action_id, action)
    if self.time_remains > time_min then return false end

    local dir = vmath.vector3()
    if action_id == hash("front") then
        dir = vmath.vector3(0, -1, 0)
    elseif action_id == hash("back") then
        dir = vmath.vector3(0, 1, 0)
    elseif action_id == hash("left") then
        dir = vmath.vector3(-1, 0, 0)
    elseif action_id == hash("right") then
        dir = vmath.vector3(1, 0, 0)
    else
        return false
    end

    -- consume action that was handled
    handle_movement_controls(self, dir)
    return true
end

function on_message(self, message_id, message, sender)
    if message_id == hash("increment_score") then
        self.score = self.score + 1
    elseif message_id == hash("collision_response") then
        -- take action
        pprint("I collided with" .. message.other_group)
    elseif message_id == hash("trigger_response") then
        -- take action
        pprint("I collided with" .. message.other_id)
    elseif message_id == hash("analog") then
        local dir = vmath.vector3(message.x, message.y, 0)
        handle_movement_controls(self, dir)
    end
end

--
-- PRIVATE METHODS
--

function normExceed(vec) 
    if vmath.length_sqr(vec) > 1 then
        return vmath.normalize(vec)
    else 
        return vec
    end
end

function handle_movement_controls(self, dir)
    self.time_remains = time_max
    self.dir = dir
end

function nearest_tile_center(position)
    local snapX = position.x - math.fmod(position.x, tile_size) + half_tile
    local snapY = position.y - math.fmod(position.y, tile_size) + half_tile

    return vmath.vector3(snapX, snapY, position.z)
end

function draw_score(self)
    if self.score == 0 then return end
    msg.post("@render:", "draw_debug_text", { text = "score: " .. self.score, position = vmath.vector3(32, 720, 0), color = color_green }) 
end


function check_win_condition(self)
    if self.score == self.win_score then 
        self.win_timer = math.min(self.win_timer, win_delay)
        if self.win_timer <= 0.0 then
            next_level(self)
        end
    end
end

function next_level(self) 
    msg.post("loader:/loader", "next_level")
    self.score = -1
end

