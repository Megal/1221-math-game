local speed = 196
local max_speed = 19600 * 3.14
local acceleration_constant = 196 * 128
local half_tile = 32
local tile_size = half_tile * 2
local time_min = 0.05
local time_max = 0.2
local lateral_speed_compensation_time = 0.2

debugger = require('libs.debugger')
debugger.start()

function init(self)
    print("INIT MAIN ASTRONAUT")
    msg.post(".", "acquire_input_focus")
    self.dir = vmath.vector3()
    self.current_anim = nil
    self.move_remains = 0
    self.time_remains = 0
end

function normExceed(vec) 
    if vmath.length_sqr(vec) > 1 then
        return vmath.normalize(vec)
    else 
        return vec
    end
end

function update(self, dt)
    self.dir = normExceed(self.dir)
    local p = go.get_position()
    local step = math.min(speed * dt, self.move_remains)
    self.move_remains = self.move_remains - step
    self.time_remains = self.time_remains - dt
        
    -- go.set_position(p + self.dir * step)
    
    local current_speed_vec3 = go.get("astronaut#collisionobject", "linear_velocity")
    local current_speed = vmath.length_sqr(current_speed_vec3)
    msg.post("@render:", "draw_text", { text = "speed: " .. current_speed, position = vmath.vector3(64, 64, 0) })
    local frictionK =  (1.0 - current_speed / max_speed)
    local impulseK = math.max(0.0, (1.1 - self.time_remains / time_max))
    local accel = self.dir * acceleration_constant * frictionK * impulseK * impulseK

    -- apply friction to lateral to dir
    if vmath.length_sqr(current_speed_vec3) > 1e-9 and vmath.length_sqr(self.dir) > 1e-9 then
        local proj = vmath.project(current_speed_vec3, self.dir) * self.dir
        local lateral = current_speed_vec3 - proj

        if vmath.length_sqr(lateral) > 0.1 then
            msg.post("@render:", "draw_text", { text = "lateral: " .. vmath.length_sqr(lateral), position = vmath.vector3(64, 164, 0) }) 
            local compensation = math.min(1.0, dt / lateral_speed_compensation_time)
            go.set("astronaut#collisionobject", "linear_velocity", current_speed_vec3 - lateral * compensation)            
        end
    end
    
        
    if self.time_remains > 1e-9 then
        -- msg.post("astronaut#collisionobject", "applied_impulse", { })
        go.set("astronaut#collisionobject", "linear_damping", 0.95)
        -- go.set("astronaut#collisionobject", "linear_velocity", self.dir * step * speed)

        if current_speed < max_speed then
            msg.post("astronaut#collisionobject", "apply_force", { force = accel, position = p })
        end
    else
        go.set("astronaut#collisionobject", "linear_damping", 1)
        local changeVector = nearest_tile_center(p) - p
        local changeVectorNormilizedAndScaled = normExceed( changeVector ) * speed * dt
        if vmath.length_sqr(changeVectorNormilizedAndScaled) <  vmath.length_sqr(changeVector) then
            -- animate snap
            go.set_position(p + changeVectorNormilizedAndScaled)
        else
            -- set to snapXY if close enough
            go.set_position(nearest_tile_center(p))
        end

    end
    
    -- animate the astronaut

    local anim = hash("idle")

    if self.dir.x > 0 then
        anim = hash("right")
    elseif self.dir.x < 0 then
        anim = hash("left")
    elseif self.dir.y > 0 then
        anim = hash("back")
    elseif self.dir.y < 0 then
        anim = hash("front")
    end

    if anim ~= self.current_anim then
        msg.post("#sprite", "play_animation", { id = anim })
        self.current_anim = anim
    end

    -- done animating
    -- if self.move_remains < 1e-9 then
    --     self.dir = vmath.vector3()
    -- end
    if self.time_remains < 1e-9 then
        self.dir = vmath.vector3()
    end
end

function on_input(self, action_id, action)
    if action_id == hash("debug") and action.released then
        msg.post("@system:", "toggle_physics_debug")
    end

    if action_id == hash("tutorial") then
        if action.pressed then
            -- start moving left
            print("LOADING TUTORIAL")
            msg.post(".", "release_input_focus")
            msg.post("loader:/loader", "show_tutorial")

        elseif action.released then
            -- stop moving left
        end
    end
    
    -- if self.move_remains > 1e-9 then return end
    -- self.move_remains = tile_size
    if self.time_remains > time_min then return end
    self.time_remains = time_max

    if action_id == hash("front") then
        self.dir = vmath.vector3(0, -1, 0)
    elseif action_id == hash("back") then
        self.dir = vmath.vector3(0, 1, 0)
    elseif action_id == hash("left") then
        self.dir = vmath.vector3(-1, 0, 0)
    elseif action_id == hash("right") then
        self.dir = vmath.vector3(1, 0, 0)
    end
end

function nearest_tile_center(position)
    local snapX = position.x - math.fmod(position.x, tile_size) + half_tile
    local snapY = position.y - math.fmod(position.y, tile_size) + half_tile

    return vmath.vector3(snapX, snapY, position.z)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("collision_response") then
        -- take action
        pprint("I collided with" .. message.other_group)
    end

--     -- proxy load
--     if message_id == hash("proxy_loaded") then
--         -- New world is loaded. Init and enable it.
--         print("PROXY LOADED IN MAIN ASTRONAUT")
--         pprint(self)
--         pprint(sender)
--         
--         msg.post(".", "release_input_focus")
-- 
--         msg.post(sender, "init")
--         msg.post(sender, "enable")
--         
--         -- give focus to character cause it does not work on init
--         
--     end
end